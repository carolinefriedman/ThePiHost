struct tex_coords
{
	float2 texCoord  : TEXCOORD0; 
};

struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
	float  frame_count;
	float  frame_direction;
	float  frame_rotation;
};

void main_vertex
(
	float4 position : POSITION,
	out float4 oPosition : POSITION,
	uniform float4x4 modelViewProj,

	float4 color : COLOR,
	out float4 oColor : COLOR,

	float2 tex : TEXCOORD,

	uniform input IN,
	out tex_coords coords
)
{
	oPosition = mul(modelViewProj, position);
	oColor = color;

	coords.texCoord = tex;
}

#define CRT_gamma 2.2
#define display_gamma 2.2
#define TEX2D(c) tex2D(decal,(c))

#define risetime 1.1
#define falltime 0.3
#define distortion 0.1
#define offpeakiness 0.1

float2 radialDistortion(float2 coord, float2 texsize, float2 vidsize) {
     coord *= texsize / vidsize;
     float2 cc = coord - 0.5;
     float dist = dot(cc, cc) * distortion;				
     return (coord + cc * (1.0 + dist) * dist) * vidsize / texsize;
}

float4 main_fragment
(
	in tex_coords co,
	uniform input IN,
	uniform sampler2D decal : TEXUNIT0
) : COLOR
{
	float2 xy = radialDistortion(co.texCoord - float2(0.0, 0.5/IN.texture_size.y), IN.texture_size, IN.video_size);

	float emu_pos = xy.y * IN.texture_size.y;
	float screen_pos = emu_pos * IN.output_size.y / IN.video_size.y;
	float line_y = floor(emu_pos) * IN.output_size.y / IN.video_size.y;
	float line_y2 = ceil(emu_pos) * IN.output_size.y / IN.video_size.y;
	float x1 = screen_pos-line_y;
	float x2 = line_y2-screen_pos;

	float2 uv_ratio     = frac(xy*IN.texture_size-float2(0.5));
	float2 one          = 1.0/IN.texture_size;

	xy = (floor(xy * IN.texture_size - float2(0.5)) + float2(0.5)) / IN.texture_size;

	float wrise = risetime*IN.video_size.x/256.0;
	float wfall = falltime*IN.video_size.x/256.0;

	float2 onex = float2(one.x, 0.0);

	float4 ct0= TEX2D(xy);
	float4 ct1= TEX2D(xy-onex);
	float4 ct2= TEX2D(xy-2*onex);
	float4 ct3= TEX2D(xy-3*onex);
	float4 ct4= TEX2D(xy-4*onex);

	float4 col = ct4;
	bool4 rising = ct3>ct4;
	col += (ct3 - col) * (1.0-exp(-float4(1.0)/lerp(float4(wfall),float4(wrise),rising)));
	rising = ct2>ct3;
	col += (ct2 - col) * (1.0-exp(-float4(1.0)/lerp(float4(wfall),float4(wrise),rising)));
	rising = ct1>ct2;
	col += (ct1 - col) * (1.0-exp(-float4(1.0)/lerp(float4(wfall),float4(wrise),rising)));
	rising = ct0>ct1;
	col += (ct0 - col) * (1.0-exp(-float4(uv_ratio.x)/lerp(float4(wfall),float4(wrise),rising)));

	col = pow(col, float4(CRT_gamma));

	if (x1 < 1.0)
	        return pow(col*float4(offpeakiness/2+(1-offpeakiness)*(1-x1)),float4(1/display_gamma));
	else if(x2 < 1.0)
	        return pow(col*float4(offpeakiness/2+(1-offpeakiness)*(1-x2)),float4(1/display_gamma));
	else
	        return float4(0.0);
	}