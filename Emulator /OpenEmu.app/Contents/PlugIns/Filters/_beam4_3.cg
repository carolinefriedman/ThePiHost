struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
	float  frame_count;
	float  frame_direction;
	float  frame_rotation;
};

struct original
{
	float2 video_size;
};

struct tex_coords
{
	float2 texCoord;
};

void main_vertex
(
	float4 position	: POSITION,
	float4 color	: COLOR,
	float2 texCoord : TEXCOORD0,

    	uniform float4x4 modelViewProj,

	out float4 oPosition : POSITION,
	out float4 oColor    : COLOR,
	out tex_coords coords
)
{
	oPosition = mul(modelViewProj, position);
	oColor = color;
	coords.texCoord = texCoord;
}

#define display_gamma 2.2
#define TEX2D(c) pow(tex2D(decal,(c)),float4(display_gamma))

float4 main_fragment
(
	in tex_coords co,
	uniform input IN,
	uniform original ORIG,
	uniform sampler2D decal : TEXUNIT0
) : COLOR
{
  	float2 xy = co.texCoord;
  	float onex = 1.0/IN.texture_size.x;

	float wid = 0.4 * IN.video_size.y / ORIG.video_size.y;

  	float c1 = exp(-1.0/wid/wid);
	float c2 = exp(-4.0/wid/wid);
	float c3 = exp(-9.0/wid/wid);
  	float c4 = exp(-16.0/wid/wid);
  	float norm = 1.0 / (1.0 + 2.0*(c1+c2+c3+c4));

  	float4 sum = float4(0.0);

  	sum += TEX2D(xy + float2(-4.0 * onex, 0.0)) * float4(c4);
  	sum += TEX2D(xy + float2(-3.0 * onex, 0.0)) * float4(c3);
  	sum += TEX2D(xy + float2(-2.0 * onex, 0.0)) * float4(c2);
  	sum += TEX2D(xy + float2(-1.0 * onex, 0.0)) * float4(c1);
  	sum += TEX2D(xy);
  	sum += TEX2D(xy + float2(+1.0 * onex, 0.0)) * float4(c1);
  	sum += TEX2D(xy + float2(+2.0 * onex, 0.0)) * float4(c2);
  	sum += TEX2D(xy + float2(+3.0 * onex, 0.0)) * float4(c3);
  	sum += TEX2D(xy + float2(+4.0 * onex, 0.0)) * float4(c4);

  	return pow(sum*float4(norm),float4(1.0/display_gamma));
}
